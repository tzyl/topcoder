class LargestCircle(object):
    def radius(self, grid):
        m = len(grid)
        n = len(grid[0])
        largest = 0
        for i in xrange(m):
            for j in xrange(n):
                for r in xrange(1, 26):
                    if self.check_circle((i, j), r, grid):
                        largest = max(largest, r)
        return largest

    def check_circle(self, centre, radius, grid):
        """Checks if the circle with centre and radius is a valid circle."""
        m = len(grid)
        n = len(grid[0])
        if not radius <= centre[0] <= m - radius or not radius <= centre[1] <= n - radius:
            return False
        # Start on the edge of the circle at each of the four cardinal
        # directions and go round circle clockwise checking the intersecting
        # squares are valid.
        i1, j1 = centre[0] - 1, centre[1] - radius
        i2, j2 = centre[0] - radius, centre[1]
        i3, j3 = centre[0], centre[1] + radius - 1
        i4, j4 = centre[0] + radius - 1, centre[1] - 1
        points = [(i1, j1), (i2, j2), (i3, j3), (i4, j4)]
        if any(grid[i][j] == "#" for i, j in points):
            return False
        while j1 < centre[1] - 1:
            if (centre[0] - i1) ** 2 + (centre[1] - (j1 + 1)) ** 2 == radius ** 2:
                i1 -= 1
                i2 += 1
                i3 += 1
                i4 -= 1
                j1 += 1
                j2 += 1
                j3 -= 1
                j4 -= 1
            elif ((centre[0] - i1) ** 2 + (centre[1] - (j1 + 1)) ** 2 > radius ** 2 and
                  (centre[0] - (i1 + 1)) ** 2 + (centre[1] - (j1 + 2)) ** 2 < radius ** 2):
                j1 += 1
                i2 += 1
                j3 -= 1
                i4 -= 1
            else:
                i1 -= 1
                j2 += 1
                i3 += 1
                j4 -= 1
            points = [(i1, j1), (i2, j2), (i3, j3), (i4, j4)]
            if any(grid[i][j] == "#" for i, j in points):
                return False
        return True
        # while j1 > centre[0] - radius:
        #     i1 -= 1
        #     if (centre[0] - (i1 + 1)) ** 2 + (centre[1] - (j1 + 1)) ** 2 >= radius ** 2:
        #         j1 += 1
        #     j2 += 1
        #     if (centre[0] - (i2 + 1)) ** 2 + (centre[1] - j2) ** 2 >= radius ** 2:
        #         i2 += 1
        #     i3 += 1
        #     if (centre[0] - i3) ** 2 + (centre[1] - j3) ** 2 >= radius ** 2:
        #         j3 -= 1
        #     j4 -= 1
        #     if (centre[0] - i4) ** 2 + (centre[1] - (j4 + 1)) ** 2 >= radius ** 2:
        #         i4 -= 1
        #     points = [(i1, j1), (i2, j2), (i3, j3), (i4, j4)]
        #     if any(grid[i][j] == "#" for i, j in points):
        #         return False
        # while j1 < centre[1]:
        #     j1 += 1
        #     i2 += 1
        #     j3 -= 1
        #     i4 -= 1
        #     points = [(i1, j1), (i2, j2), (i3, j3), (i4, j4)]
        #     if any(grid[i][j] == "#" for i, j in points):
        #         return False
        # return True

if __name__ == '__main__':
    print LargestCircle().radius(["############",
    "###......###",
    "##.######.##",
    "#.########.#",
    "#.##..####.#",
    "#.##..####.#",
    "#.########.#",
    "#.########.#",
    "#.########.#",
    "##.######.##",
    "###......###",
    "############" ])
    print LargestCircle().radius(["#####.......",
      "#####.......",
      "#####.......",
      "............",
      "............",
      "............",
      "............",
      "............",
      "............",
      "............"])

    print LargestCircle().radius([".........................#........................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      "..................................................",
      ".................................................."])
